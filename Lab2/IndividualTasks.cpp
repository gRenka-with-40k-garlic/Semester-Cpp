#include "Tasks.h"

//1)Дано имя файла и целые положительные числа N и K.Создать тексто - вый файл с указанным именем и записать
//в него N строк, каждая из кото - рых состоит из K символов « * »(звездочка).
    void individual1Function(const std::string & filename) {
        std::ofstream file(filename);
        if (file.is_open()) {
            int N = 45;
            int K = 34;
            for (int i = 0; i < N; ++i) {
                file << std::string(K, '*') << "\n";
            }
            file.close();
        }
    }

//2)Дано имя файла и целое число N(0 < N < 27).Создать текстовый файл с указанным именем и записать в него N строк :
// первая строка должна со - держать строчную(то есть маленькую) латинскую букву «a», вторая — буквы «ab», третья — буквы «abc» и т.д.;
// последняя строка должна содер - жать N начальных строчных латинских букв в алфавитном порядке.
void individual2Function(const std::string& filename) {
    int N = 27; // N(0 < N < 27).
    std::ofstream file(filename);
    if (file.is_open()) {
        for (int i = 1; i <= N; ++i) {
            std::string line;
            for (int j = 0; j < i; ++j) {
                line += 'a' + j;
            }
            file << line << std::endl;
        }
        for (int i = 0; i < N; ++i) {
            file << static_cast<char>('a' + i);
        }
        file.close();
    }
}

//3)Дана строка S и текстовый файл.Добавить строку S в конец файла.
void individual3Function(const std::string& filename) {
    const std::string& S = "А ВОТ ТУТ я вставила строку в конец файла";
    std::fstream file(filename, std::ios_base::app);
    if (file.is_open()) {
        file << S << std::endl;
        file.close();
    }
}

//4)Дана строка S и текстовый файл.Добавить строку S в начало файла.
void individual4Function(const std::string& filename) {
    const std::string& S = "ЗДЕСЬ я вставила строку в начало файла";
    std::ifstream inputFile(filename);
    if (inputFile.is_open()) {
        std::vector<std::string> lines;
        std::string line;

        while (std::getline(inputFile, line)) {
            lines.push_back(line);
        }
        std::ofstream outputFile(filename);
        if (outputFile.is_open()) {
            outputFile << S << std::endl;
            for (const auto& oldLine : lines) {
                outputFile << oldLine << std::endl;
            }
        }
    }
}

//5)Дано целое число K и текстовый файл.Вставить пустую строку перед строкой файла с номером K.
// Если строки с таким номером нет, то оставить файл без изменений.
void individual5Function(const std::string& filename) {

}

//6)Дано целое число K и текстовый файл.Вставить пустую строку после строки файла с номером K.
// Если строки с таким номером нет, то оставить файл без изменений.
void individual6Function(const std::string& filename) {

}

//7)Дан текстовый файл.Продублировать в нем все пустые строки.
void individual7Function(const std::string& filename) {

}

//8)Дана строка S и текстовый файл.Заменить в файле все пустые строки на строку S.
void individual8Function(const std::string& filename) {

}

//9)Дано целое число K и текстовый файл.Удалить из файла строку с но - мером K.
//Если строки с таким номером нет, то оставить файл без измене - ний.
void individual9Function(const std::string& filename) {

}

//10)Дан текстовый файл.Удалить из него все пустые строки.
void individual10Function(const std::string& filename) {

}

//11)Даны два текстовых файла.Добавить в конец каждой строки первого файла соответствующую строку второго файла.
//Если второй файл короче первого, то оставшиеся строки первого файла не изменять.
void individual11Function(const std::string& filename) {

}

//12)Дано целое число K и текстовый файл.Удалить из каждой строки фай - ла первые K символов
//(если длина строки меньше K, то удалить из нее все символы).
void individual12Function(const std::string& filename) {

}

//13)Дан текстовый файл.Вывести первое слово текста наибольшей длины.Словом считать набор символов,
//не содержащий пробелов и ограниченный пробелами или началом / концом строки.
void individual13Function(const std::string& filename) {

}

//14)Дан текстовый файл.Вывести последнее слово текста наименьшей длины.
//Словом считать набор символов, не содержащий пробелов и огра - ниченный пробелами или началом / концом строки.
void individual14Function(const std::string& filename) {

}

//15)Дано целое число K и текстовый файл.Создать строковый файл и запи - сать в него все слова длины K из исходного файла.
//Словом считать набор символов, не содержащий пробелов, знаков препинания и ограниченный пробелами,
//знаками препинания или началом / концом строки.Если исход - ный файл не содержит слов длины K, то оставить результирующий файл пустым.

void individual15Function(const std::string& filename) {

}

//16)Дан символ C — прописная(заглавная) русская буква и текстовый файл.
//Создать строковый файл и записать в него все слова из исходного файла, начинающиеся на эту букву(прописную или строчную).
//Словом считать набор символов, не содержащий пробелов, знаков препинания и ограниченный пробелами, знаками препинания или началом / концом стро - ки.
//Если исходный файл не содержит подходящих слов, то оставить ре - зультирующий файл пустым.

void individual16Function(const std::string& filename) {

}

//17)Дан символ C — строчная(маленькая) русская буква и текстовый файл.
//Создать строковый файл и записать в него все слова из исходного файла, содержащие хотя бы одну букву C(прописную или строчную).
//Сло - вом считать набор символов, не содержащий пробелов, знаков препинания и ограниченный пробелами, знаками препинания или началом / концом строки.
//Если исходный файл не содержит подходящих слов, то оставить результирующий файл пустым
void individual17Function(const std::string& filename) {

}

//18)Дан текстовый файл.Создать символьный файл, содержащий все знаки препинания, встретившиеся в текстовом файле(в том же порядке).
void individual18Function(const std::string& filename) {

}